# 1. Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на русский язык. Например:
# >>> num_translate("one")
# "один"
# >>> num_translate("eight")
# "восемь"
# Если перевод сделать невозможно, вернуть None. Подумайте, как и где лучше хранить информацию, необходимую для перевода: какой тип данных выбрать, в теле функции или снаружи.
# 2. * (вместо задачи 1) Доработать предыдущую функцию в num_translate_adv(): реализовать корректную работу с числительными, начинающимися с заглавной буквы — результат тоже должен быть с заглавной. Например:
# >>> num_translate_adv("One")
# "Один"
# >>> num_translate_adv("two")
# "два"

def num_translate(word):
    dict_numbers = {
        'one' : 'один',
        'two' : 'два',
        'three': 'три',
        'four': 'четыре',
        'five': 'пять',
        'six':'шесть',
        'seven': 'семь',
        'eight': 'восемь',
        'nine': 'девять',
        'zero':'ноль'
    }
    if word.islower():
        print((dict_numbers.get(word.lower())).lower())
    else:
        print((dict_numbers.get(word.lower())).title())

num_translate('one')

# 3. Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь, в котором ключи — первые буквы имён, а значения — списки, содержащие имена, начинающиеся с соответствующей буквы. Например:
# >>>  thesaurus("Иван", "Мария", "Петр", "Илья")
# {
#     "И": ["Иван", "Илья"],
#     "М": ["Мария"], "П": ["Петр"]
# }
# Подумайте: полезен ли будет вам оператор распаковки? Как поступить, если потребуется сортировка по ключам? Можно ли использовать словарь в этом случае?

def thesaurus(*args):
    dict_1 = {}
    for word in args:
        if word[0] not in dict_1.keys():
            dict_1.setdefault(word[0], [word])
        else:
            dict_1[word[0]].append(word)

    print(dict_1)

thesaurus("Иван", "Мария", "Петр", "Илья")

# 4. Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки в формате «Имя Фамилия» и возвращающую словарь, в котором ключи — первые буквы фамилий, а значения — словари, реализованные по схеме предыдущего задания и содержащие записи, в которых фамилия начинается с соответствующей буквы. Например:
# >>> thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
# {
#     "А": {
#         "П": ["Петр Алексеев"]
#     },
#     "И": {
#         "И": ["Илья Иванов"]
#     },
#     "С": {
#         "И": ["Иван Сергеев", "Инна Серова"],
#         "А": ["Анна Савельева"]
#     }
# }

def thesaurus_adv(*args):
    dictionary = {}
    for word in args:
        words = word.split() # создали список для каждого элемента [имя, фамилия]
        if words[1][0] not in dictionary.keys():
            dictionary[words[1][0]] = {}
            dictionary[word[0]].append(word)
    return dictionary